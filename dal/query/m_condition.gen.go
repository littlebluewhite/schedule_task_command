// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schedule_task_command/dal/model"
)

func newMCondition(db *gorm.DB, opts ...gen.DOOption) mCondition {
	_mCondition := mCondition{}

	_mCondition.mConditionDo.UseDB(db, opts...)
	_mCondition.mConditionDo.UseModel(&model.MCondition{})

	tableName := _mCondition.mConditionDo.TableName()
	_mCondition.ALL = field.NewAsterisk(tableName)
	_mCondition.ID = field.NewInt32(tableName, "id")
	_mCondition.Order = field.NewInt32(tableName, "order")
	_mCondition.CalculateType = field.NewString(tableName, "calculate_type")
	_mCondition.PreLogicType = field.NewString(tableName, "pre_logic_type")
	_mCondition.Value = field.NewString(tableName, "value")
	_mCondition.SearchRule = field.NewString(tableName, "search_rule")
	_mCondition.MonitorID = field.NewInt32(tableName, "monitor_id")

	_mCondition.fillFieldMap()

	return _mCondition
}

type mCondition struct {
	mConditionDo mConditionDo

	ALL           field.Asterisk
	ID            field.Int32
	Order         field.Int32
	CalculateType field.String
	PreLogicType  field.String
	Value         field.String
	SearchRule    field.String // ex: person.item.[]array.name
	MonitorID     field.Int32

	fieldMap map[string]field.Expr
}

func (m mCondition) Table(newTableName string) *mCondition {
	m.mConditionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mCondition) As(alias string) *mCondition {
	m.mConditionDo.DO = *(m.mConditionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mCondition) updateTableName(table string) *mCondition {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Order = field.NewInt32(table, "order")
	m.CalculateType = field.NewString(table, "calculate_type")
	m.PreLogicType = field.NewString(table, "pre_logic_type")
	m.Value = field.NewString(table, "value")
	m.SearchRule = field.NewString(table, "search_rule")
	m.MonitorID = field.NewInt32(table, "monitor_id")

	m.fillFieldMap()

	return m
}

func (m *mCondition) WithContext(ctx context.Context) *mConditionDo {
	return m.mConditionDo.WithContext(ctx)
}

func (m mCondition) TableName() string { return m.mConditionDo.TableName() }

func (m mCondition) Alias() string { return m.mConditionDo.Alias() }

func (m mCondition) Columns(cols ...field.Expr) gen.Columns { return m.mConditionDo.Columns(cols...) }

func (m *mCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mCondition) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["order"] = m.Order
	m.fieldMap["calculate_type"] = m.CalculateType
	m.fieldMap["pre_logic_type"] = m.PreLogicType
	m.fieldMap["value"] = m.Value
	m.fieldMap["search_rule"] = m.SearchRule
	m.fieldMap["monitor_id"] = m.MonitorID
}

func (m mCondition) clone(db *gorm.DB) mCondition {
	m.mConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mCondition) replaceDB(db *gorm.DB) mCondition {
	m.mConditionDo.ReplaceDB(db)
	return m
}

type mConditionDo struct{ gen.DO }

func (m mConditionDo) Debug() *mConditionDo {
	return m.withDO(m.DO.Debug())
}

func (m mConditionDo) WithContext(ctx context.Context) *mConditionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mConditionDo) ReadDB() *mConditionDo {
	return m.Clauses(dbresolver.Read)
}

func (m mConditionDo) WriteDB() *mConditionDo {
	return m.Clauses(dbresolver.Write)
}

func (m mConditionDo) Session(config *gorm.Session) *mConditionDo {
	return m.withDO(m.DO.Session(config))
}

func (m mConditionDo) Clauses(conds ...clause.Expression) *mConditionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mConditionDo) Returning(value interface{}, columns ...string) *mConditionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mConditionDo) Not(conds ...gen.Condition) *mConditionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mConditionDo) Or(conds ...gen.Condition) *mConditionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mConditionDo) Select(conds ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mConditionDo) Where(conds ...gen.Condition) *mConditionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mConditionDo) Order(conds ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mConditionDo) Distinct(cols ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mConditionDo) Omit(cols ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mConditionDo) Join(table schema.Tabler, on ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mConditionDo) Group(cols ...field.Expr) *mConditionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mConditionDo) Having(conds ...gen.Condition) *mConditionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mConditionDo) Limit(limit int) *mConditionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mConditionDo) Offset(offset int) *mConditionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mConditionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mConditionDo) Unscoped() *mConditionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mConditionDo) Create(values ...*model.MCondition) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mConditionDo) CreateInBatches(values []*model.MCondition, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mConditionDo) Save(values ...*model.MCondition) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mConditionDo) First() (*model.MCondition, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCondition), nil
	}
}

func (m mConditionDo) Take() (*model.MCondition, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCondition), nil
	}
}

func (m mConditionDo) Last() (*model.MCondition, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCondition), nil
	}
}

func (m mConditionDo) Find() ([]*model.MCondition, error) {
	result, err := m.DO.Find()
	return result.([]*model.MCondition), err
}

func (m mConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MCondition, err error) {
	buf := make([]*model.MCondition, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mConditionDo) FindInBatches(result *[]*model.MCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mConditionDo) Attrs(attrs ...field.AssignExpr) *mConditionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mConditionDo) Assign(attrs ...field.AssignExpr) *mConditionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mConditionDo) Joins(fields ...field.RelationField) *mConditionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mConditionDo) Preload(fields ...field.RelationField) *mConditionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mConditionDo) FirstOrInit() (*model.MCondition, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCondition), nil
	}
}

func (m mConditionDo) FirstOrCreate() (*model.MCondition, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MCondition), nil
	}
}

func (m mConditionDo) FindByPage(offset int, limit int) (result []*model.MCondition, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mConditionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mConditionDo) Delete(models ...*model.MCondition) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mConditionDo) withDO(do gen.Dao) *mConditionDo {
	m.DO = *do.(*gen.DO)
	return m
}
