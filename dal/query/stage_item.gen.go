// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/littlebluewhite/schedule_task_command/dal/model"
)

func newStageItem(db *gorm.DB, opts ...gen.DOOption) stageItem {
	_stageItem := stageItem{}

	_stageItem.stageItemDo.UseDB(db, opts...)
	_stageItem.stageItemDo.UseModel(&model.StageItem{})

	tableName := _stageItem.stageItemDo.TableName()
	_stageItem.ALL = field.NewAsterisk(tableName)
	_stageItem.ID = field.NewInt32(tableName, "id")
	_stageItem.Name = field.NewString(tableName, "name")
	_stageItem.StageNumber = field.NewInt32(tableName, "stage_number")
	_stageItem.Mode = field.NewString(tableName, "mode")
	_stageItem.CommandTemplateID = field.NewInt32(tableName, "command_template_id")
	_stageItem.Tags = field.NewBytes(tableName, "tags")
	_stageItem.Variable = field.NewBytes(tableName, "variable")
	_stageItem.Parser = field.NewBytes(tableName, "parser")
	_stageItem.CommandTemplate = stageItemBelongsToCommandTemplate{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CommandTemplate", "model.CommandTemplate"),
		Http: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Http", "model.HTTPSCommand"),
		},
		Mqtt: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Mqtt", "model.MqttCommand"),
		},
		Websocket: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Websocket", "model.WebsocketCommand"),
		},
		Redis: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Redis", "model.RedisCommand"),
		},
		Monitor: struct {
			field.RelationField
			MConditions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CommandTemplate.Monitor", "model.Monitor"),
			MConditions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CommandTemplate.Monitor.MConditions", "model.MCondition"),
			},
		},
		ParserReturn: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.ParserReturn", "model.ParserReturn"),
		},
	}

	_stageItem.fillFieldMap()

	return _stageItem
}

type stageItem struct {
	stageItemDo stageItemDo

	ALL               field.Asterisk
	ID                field.Int32
	Name              field.String
	StageNumber       field.Int32
	Mode              field.String
	CommandTemplateID field.Int32
	Tags              field.Bytes
	Variable          field.Bytes
	Parser            field.Bytes
	CommandTemplate   stageItemBelongsToCommandTemplate

	fieldMap map[string]field.Expr
}

func (s stageItem) Table(newTableName string) *stageItem {
	s.stageItemDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stageItem) As(alias string) *stageItem {
	s.stageItemDo.DO = *(s.stageItemDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stageItem) updateTableName(table string) *stageItem {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.StageNumber = field.NewInt32(table, "stage_number")
	s.Mode = field.NewString(table, "mode")
	s.CommandTemplateID = field.NewInt32(table, "command_template_id")
	s.Tags = field.NewBytes(table, "tags")
	s.Variable = field.NewBytes(table, "variable")
	s.Parser = field.NewBytes(table, "parser")

	s.fillFieldMap()

	return s
}

func (s *stageItem) WithContext(ctx context.Context) *stageItemDo {
	return s.stageItemDo.WithContext(ctx)
}

func (s stageItem) TableName() string { return s.stageItemDo.TableName() }

func (s stageItem) Alias() string { return s.stageItemDo.Alias() }

func (s stageItem) Columns(cols ...field.Expr) gen.Columns { return s.stageItemDo.Columns(cols...) }

func (s *stageItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stageItem) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["stage_number"] = s.StageNumber
	s.fieldMap["mode"] = s.Mode
	s.fieldMap["command_template_id"] = s.CommandTemplateID
	s.fieldMap["tags"] = s.Tags
	s.fieldMap["variable"] = s.Variable
	s.fieldMap["parser"] = s.Parser

}

func (s stageItem) clone(db *gorm.DB) stageItem {
	s.stageItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stageItem) replaceDB(db *gorm.DB) stageItem {
	s.stageItemDo.ReplaceDB(db)
	return s
}

type stageItemBelongsToCommandTemplate struct {
	db *gorm.DB

	field.RelationField

	Http struct {
		field.RelationField
	}
	Mqtt struct {
		field.RelationField
	}
	Websocket struct {
		field.RelationField
	}
	Redis struct {
		field.RelationField
	}
	Monitor struct {
		field.RelationField
		MConditions struct {
			field.RelationField
		}
	}
	ParserReturn struct {
		field.RelationField
	}
}

func (a stageItemBelongsToCommandTemplate) Where(conds ...field.Expr) *stageItemBelongsToCommandTemplate {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a stageItemBelongsToCommandTemplate) WithContext(ctx context.Context) *stageItemBelongsToCommandTemplate {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a stageItemBelongsToCommandTemplate) Session(session *gorm.Session) *stageItemBelongsToCommandTemplate {
	a.db = a.db.Session(session)
	return &a
}

func (a stageItemBelongsToCommandTemplate) Model(m *model.StageItem) *stageItemBelongsToCommandTemplateTx {
	return &stageItemBelongsToCommandTemplateTx{a.db.Model(m).Association(a.Name())}
}

type stageItemBelongsToCommandTemplateTx struct{ tx *gorm.Association }

func (a stageItemBelongsToCommandTemplateTx) Find() (result *model.CommandTemplate, err error) {
	return result, a.tx.Find(&result)
}

func (a stageItemBelongsToCommandTemplateTx) Append(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a stageItemBelongsToCommandTemplateTx) Replace(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a stageItemBelongsToCommandTemplateTx) Delete(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a stageItemBelongsToCommandTemplateTx) Clear() error {
	return a.tx.Clear()
}

func (a stageItemBelongsToCommandTemplateTx) Count() int64 {
	return a.tx.Count()
}

type stageItemDo struct{ gen.DO }

func (s stageItemDo) Debug() *stageItemDo {
	return s.withDO(s.DO.Debug())
}

func (s stageItemDo) WithContext(ctx context.Context) *stageItemDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stageItemDo) ReadDB() *stageItemDo {
	return s.Clauses(dbresolver.Read)
}

func (s stageItemDo) WriteDB() *stageItemDo {
	return s.Clauses(dbresolver.Write)
}

func (s stageItemDo) Session(config *gorm.Session) *stageItemDo {
	return s.withDO(s.DO.Session(config))
}

func (s stageItemDo) Clauses(conds ...clause.Expression) *stageItemDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stageItemDo) Returning(value interface{}, columns ...string) *stageItemDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stageItemDo) Not(conds ...gen.Condition) *stageItemDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stageItemDo) Or(conds ...gen.Condition) *stageItemDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stageItemDo) Select(conds ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stageItemDo) Where(conds ...gen.Condition) *stageItemDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stageItemDo) Order(conds ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stageItemDo) Distinct(cols ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stageItemDo) Omit(cols ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stageItemDo) Join(table schema.Tabler, on ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stageItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stageItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stageItemDo) Group(cols ...field.Expr) *stageItemDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stageItemDo) Having(conds ...gen.Condition) *stageItemDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stageItemDo) Limit(limit int) *stageItemDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stageItemDo) Offset(offset int) *stageItemDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stageItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *stageItemDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stageItemDo) Unscoped() *stageItemDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stageItemDo) Create(values ...*model.StageItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stageItemDo) CreateInBatches(values []*model.StageItem, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stageItemDo) Save(values ...*model.StageItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stageItemDo) First() (*model.StageItem, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StageItem), nil
	}
}

func (s stageItemDo) Take() (*model.StageItem, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StageItem), nil
	}
}

func (s stageItemDo) Last() (*model.StageItem, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StageItem), nil
	}
}

func (s stageItemDo) Find() ([]*model.StageItem, error) {
	result, err := s.DO.Find()
	return result.([]*model.StageItem), err
}

func (s stageItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StageItem, err error) {
	buf := make([]*model.StageItem, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stageItemDo) FindInBatches(result *[]*model.StageItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stageItemDo) Attrs(attrs ...field.AssignExpr) *stageItemDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stageItemDo) Assign(attrs ...field.AssignExpr) *stageItemDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stageItemDo) Joins(fields ...field.RelationField) *stageItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stageItemDo) Preload(fields ...field.RelationField) *stageItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stageItemDo) FirstOrInit() (*model.StageItem, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StageItem), nil
	}
}

func (s stageItemDo) FirstOrCreate() (*model.StageItem, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StageItem), nil
	}
}

func (s stageItemDo) FindByPage(offset int, limit int) (result []*model.StageItem, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stageItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stageItemDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stageItemDo) Delete(models ...*model.StageItem) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stageItemDo) withDO(do gen.Dao) *stageItemDo {
	s.DO = *do.(*gen.DO)
	return s
}
