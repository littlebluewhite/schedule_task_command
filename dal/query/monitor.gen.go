// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schedule_task_command/dal/model"
)

func newMonitor(db *gorm.DB, opts ...gen.DOOption) monitor {
	_monitor := monitor{}

	_monitor.monitorDo.UseDB(db, opts...)
	_monitor.monitorDo.UseModel(&model.Monitor{})

	tableName := _monitor.monitorDo.TableName()
	_monitor.ALL = field.NewAsterisk(tableName)
	_monitor.ID = field.NewInt32(tableName, "id")
	_monitor.StatusCode = field.NewInt32(tableName, "status_code")
	_monitor.Interval = field.NewInt32(tableName, "interval")
	_monitor.CommandTemplateID = field.NewInt32(tableName, "command_template_id")
	_monitor.MConditions = monitorHasManyMConditions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MConditions", "model.MCondition"),
	}

	_monitor.fillFieldMap()

	return _monitor
}

type monitor struct {
	monitorDo monitorDo

	ALL               field.Asterisk
	ID                field.Int32
	StatusCode        field.Int32
	Interval          field.Int32
	CommandTemplateID field.Int32
	MConditions       monitorHasManyMConditions

	fieldMap map[string]field.Expr
}

func (m monitor) Table(newTableName string) *monitor {
	m.monitorDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitor) As(alias string) *monitor {
	m.monitorDo.DO = *(m.monitorDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitor) updateTableName(table string) *monitor {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.StatusCode = field.NewInt32(table, "status_code")
	m.Interval = field.NewInt32(table, "interval")
	m.CommandTemplateID = field.NewInt32(table, "command_template_id")

	m.fillFieldMap()

	return m
}

func (m *monitor) WithContext(ctx context.Context) *monitorDo { return m.monitorDo.WithContext(ctx) }

func (m monitor) TableName() string { return m.monitorDo.TableName() }

func (m monitor) Alias() string { return m.monitorDo.Alias() }

func (m monitor) Columns(cols ...field.Expr) gen.Columns { return m.monitorDo.Columns(cols...) }

func (m *monitor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitor) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["status_code"] = m.StatusCode
	m.fieldMap["interval"] = m.Interval
	m.fieldMap["command_template_id"] = m.CommandTemplateID

}

func (m monitor) clone(db *gorm.DB) monitor {
	m.monitorDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitor) replaceDB(db *gorm.DB) monitor {
	m.monitorDo.ReplaceDB(db)
	return m
}

type monitorHasManyMConditions struct {
	db *gorm.DB

	field.RelationField
}

func (a monitorHasManyMConditions) Where(conds ...field.Expr) *monitorHasManyMConditions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a monitorHasManyMConditions) WithContext(ctx context.Context) *monitorHasManyMConditions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a monitorHasManyMConditions) Session(session *gorm.Session) *monitorHasManyMConditions {
	a.db = a.db.Session(session)
	return &a
}

func (a monitorHasManyMConditions) Model(m *model.Monitor) *monitorHasManyMConditionsTx {
	return &monitorHasManyMConditionsTx{a.db.Model(m).Association(a.Name())}
}

type monitorHasManyMConditionsTx struct{ tx *gorm.Association }

func (a monitorHasManyMConditionsTx) Find() (result []*model.MCondition, err error) {
	return result, a.tx.Find(&result)
}

func (a monitorHasManyMConditionsTx) Append(values ...*model.MCondition) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a monitorHasManyMConditionsTx) Replace(values ...*model.MCondition) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a monitorHasManyMConditionsTx) Delete(values ...*model.MCondition) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a monitorHasManyMConditionsTx) Clear() error {
	return a.tx.Clear()
}

func (a monitorHasManyMConditionsTx) Count() int64 {
	return a.tx.Count()
}

type monitorDo struct{ gen.DO }

func (m monitorDo) Debug() *monitorDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorDo) WithContext(ctx context.Context) *monitorDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorDo) ReadDB() *monitorDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorDo) WriteDB() *monitorDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorDo) Session(config *gorm.Session) *monitorDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorDo) Clauses(conds ...clause.Expression) *monitorDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorDo) Returning(value interface{}, columns ...string) *monitorDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorDo) Not(conds ...gen.Condition) *monitorDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorDo) Or(conds ...gen.Condition) *monitorDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorDo) Select(conds ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorDo) Where(conds ...gen.Condition) *monitorDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorDo) Order(conds ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorDo) Distinct(cols ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorDo) Omit(cols ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorDo) Join(table schema.Tabler, on ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *monitorDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorDo) RightJoin(table schema.Tabler, on ...field.Expr) *monitorDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorDo) Group(cols ...field.Expr) *monitorDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorDo) Having(conds ...gen.Condition) *monitorDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorDo) Limit(limit int) *monitorDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorDo) Offset(offset int) *monitorDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *monitorDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorDo) Unscoped() *monitorDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorDo) Create(values ...*model.Monitor) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorDo) CreateInBatches(values []*model.Monitor, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorDo) Save(values ...*model.Monitor) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorDo) First() (*model.Monitor, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monitor), nil
	}
}

func (m monitorDo) Take() (*model.Monitor, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monitor), nil
	}
}

func (m monitorDo) Last() (*model.Monitor, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monitor), nil
	}
}

func (m monitorDo) Find() ([]*model.Monitor, error) {
	result, err := m.DO.Find()
	return result.([]*model.Monitor), err
}

func (m monitorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Monitor, err error) {
	buf := make([]*model.Monitor, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorDo) FindInBatches(result *[]*model.Monitor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorDo) Attrs(attrs ...field.AssignExpr) *monitorDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorDo) Assign(attrs ...field.AssignExpr) *monitorDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorDo) Joins(fields ...field.RelationField) *monitorDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorDo) Preload(fields ...field.RelationField) *monitorDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorDo) FirstOrInit() (*model.Monitor, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monitor), nil
	}
}

func (m monitorDo) FirstOrCreate() (*model.Monitor, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Monitor), nil
	}
}

func (m monitorDo) FindByPage(offset int, limit int) (result []*model.Monitor, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorDo) Delete(models ...*model.Monitor) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorDo) withDO(do gen.Dao) *monitorDo {
	m.DO = *do.(*gen.DO)
	return m
}
