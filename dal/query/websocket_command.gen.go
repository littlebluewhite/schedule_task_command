// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/littlebluewhite/schedule_task_command/dal/model"
)

func newWebsocketCommand(db *gorm.DB, opts ...gen.DOOption) websocketCommand {
	_websocketCommand := websocketCommand{}

	_websocketCommand.websocketCommandDo.UseDB(db, opts...)
	_websocketCommand.websocketCommandDo.UseModel(&model.WebsocketCommand{})

	tableName := _websocketCommand.websocketCommandDo.TableName()
	_websocketCommand.ALL = field.NewAsterisk(tableName)
	_websocketCommand.ID = field.NewInt32(tableName, "id")
	_websocketCommand.CommandTemplateID = field.NewInt32(tableName, "command_template_id")
	_websocketCommand.URL = field.NewString(tableName, "url")
	_websocketCommand.Header = field.NewBytes(tableName, "header")
	_websocketCommand.Message = field.NewString(tableName, "message")

	_websocketCommand.fillFieldMap()

	return _websocketCommand
}

type websocketCommand struct {
	websocketCommandDo websocketCommandDo

	ALL               field.Asterisk
	ID                field.Int32
	CommandTemplateID field.Int32
	URL               field.String
	Header            field.Bytes
	Message           field.String

	fieldMap map[string]field.Expr
}

func (w websocketCommand) Table(newTableName string) *websocketCommand {
	w.websocketCommandDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websocketCommand) As(alias string) *websocketCommand {
	w.websocketCommandDo.DO = *(w.websocketCommandDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websocketCommand) updateTableName(table string) *websocketCommand {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.CommandTemplateID = field.NewInt32(table, "command_template_id")
	w.URL = field.NewString(table, "url")
	w.Header = field.NewBytes(table, "header")
	w.Message = field.NewString(table, "message")

	w.fillFieldMap()

	return w
}

func (w *websocketCommand) WithContext(ctx context.Context) *websocketCommandDo {
	return w.websocketCommandDo.WithContext(ctx)
}

func (w websocketCommand) TableName() string { return w.websocketCommandDo.TableName() }

func (w websocketCommand) Alias() string { return w.websocketCommandDo.Alias() }

func (w websocketCommand) Columns(cols ...field.Expr) gen.Columns {
	return w.websocketCommandDo.Columns(cols...)
}

func (w *websocketCommand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websocketCommand) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["command_template_id"] = w.CommandTemplateID
	w.fieldMap["url"] = w.URL
	w.fieldMap["header"] = w.Header
	w.fieldMap["message"] = w.Message
}

func (w websocketCommand) clone(db *gorm.DB) websocketCommand {
	w.websocketCommandDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websocketCommand) replaceDB(db *gorm.DB) websocketCommand {
	w.websocketCommandDo.ReplaceDB(db)
	return w
}

type websocketCommandDo struct{ gen.DO }

func (w websocketCommandDo) Debug() *websocketCommandDo {
	return w.withDO(w.DO.Debug())
}

func (w websocketCommandDo) WithContext(ctx context.Context) *websocketCommandDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websocketCommandDo) ReadDB() *websocketCommandDo {
	return w.Clauses(dbresolver.Read)
}

func (w websocketCommandDo) WriteDB() *websocketCommandDo {
	return w.Clauses(dbresolver.Write)
}

func (w websocketCommandDo) Session(config *gorm.Session) *websocketCommandDo {
	return w.withDO(w.DO.Session(config))
}

func (w websocketCommandDo) Clauses(conds ...clause.Expression) *websocketCommandDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websocketCommandDo) Returning(value interface{}, columns ...string) *websocketCommandDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websocketCommandDo) Not(conds ...gen.Condition) *websocketCommandDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websocketCommandDo) Or(conds ...gen.Condition) *websocketCommandDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websocketCommandDo) Select(conds ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websocketCommandDo) Where(conds ...gen.Condition) *websocketCommandDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websocketCommandDo) Order(conds ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websocketCommandDo) Distinct(cols ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websocketCommandDo) Omit(cols ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websocketCommandDo) Join(table schema.Tabler, on ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websocketCommandDo) LeftJoin(table schema.Tabler, on ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websocketCommandDo) RightJoin(table schema.Tabler, on ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websocketCommandDo) Group(cols ...field.Expr) *websocketCommandDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websocketCommandDo) Having(conds ...gen.Condition) *websocketCommandDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websocketCommandDo) Limit(limit int) *websocketCommandDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websocketCommandDo) Offset(offset int) *websocketCommandDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websocketCommandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *websocketCommandDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websocketCommandDo) Unscoped() *websocketCommandDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websocketCommandDo) Create(values ...*model.WebsocketCommand) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websocketCommandDo) CreateInBatches(values []*model.WebsocketCommand, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websocketCommandDo) Save(values ...*model.WebsocketCommand) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websocketCommandDo) First() (*model.WebsocketCommand, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketCommand), nil
	}
}

func (w websocketCommandDo) Take() (*model.WebsocketCommand, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketCommand), nil
	}
}

func (w websocketCommandDo) Last() (*model.WebsocketCommand, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketCommand), nil
	}
}

func (w websocketCommandDo) Find() ([]*model.WebsocketCommand, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsocketCommand), err
}

func (w websocketCommandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsocketCommand, err error) {
	buf := make([]*model.WebsocketCommand, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websocketCommandDo) FindInBatches(result *[]*model.WebsocketCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websocketCommandDo) Attrs(attrs ...field.AssignExpr) *websocketCommandDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websocketCommandDo) Assign(attrs ...field.AssignExpr) *websocketCommandDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websocketCommandDo) Joins(fields ...field.RelationField) *websocketCommandDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websocketCommandDo) Preload(fields ...field.RelationField) *websocketCommandDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websocketCommandDo) FirstOrInit() (*model.WebsocketCommand, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketCommand), nil
	}
}

func (w websocketCommandDo) FirstOrCreate() (*model.WebsocketCommand, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketCommand), nil
	}
}

func (w websocketCommandDo) FindByPage(offset int, limit int) (result []*model.WebsocketCommand, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websocketCommandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websocketCommandDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websocketCommandDo) Delete(models ...*model.WebsocketCommand) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websocketCommandDo) withDO(do gen.Dao) *websocketCommandDo {
	w.DO = *do.(*gen.DO)
	return w
}
