// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schedule_task_command/dal/model"
)

func newTaskStage(db *gorm.DB, opts ...gen.DOOption) taskStage {
	_taskStage := taskStage{}

	_taskStage.taskStageDo.UseDB(db, opts...)
	_taskStage.taskStageDo.UseModel(&model.TaskStage{})

	tableName := _taskStage.taskStageDo.TableName()
	_taskStage.ALL = field.NewAsterisk(tableName)
	_taskStage.ID = field.NewInt32(tableName, "id")
	_taskStage.Name = field.NewString(tableName, "name")
	_taskStage.StageNumber = field.NewInt32(tableName, "stage_number")
	_taskStage.Mode = field.NewString(tableName, "mode")
	_taskStage.CommandTemplateID = field.NewInt32(tableName, "command_template_id")
	_taskStage.Tags = field.NewBytes(tableName, "tags")
	_taskStage.CommandTemplate = taskStageBelongsToCommandTemplate{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CommandTemplate", "model.CommandTemplate"),
		Http: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Http", "model.HTTPSCommand"),
		},
		Mqtt: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Mqtt", "model.MqttCommand"),
		},
		Websocket: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Websocket", "model.WebsocketCommand"),
		},
		Redis: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CommandTemplate.Redis", "model.RedisCommand"),
		},
		Monitor: struct {
			field.RelationField
			MConditions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CommandTemplate.Monitor", "model.Monitor"),
			MConditions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CommandTemplate.Monitor.MConditions", "model.MCondition"),
			},
		},
	}

	_taskStage.fillFieldMap()

	return _taskStage
}

type taskStage struct {
	taskStageDo taskStageDo

	ALL               field.Asterisk
	ID                field.Int32
	Name              field.String
	StageNumber       field.Int32
	Mode              field.String
	CommandTemplateID field.Int32
	Tags              field.Bytes
	CommandTemplate   taskStageBelongsToCommandTemplate

	fieldMap map[string]field.Expr
}

func (t taskStage) Table(newTableName string) *taskStage {
	t.taskStageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskStage) As(alias string) *taskStage {
	t.taskStageDo.DO = *(t.taskStageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskStage) updateTableName(table string) *taskStage {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.StageNumber = field.NewInt32(table, "stage_number")
	t.Mode = field.NewString(table, "mode")
	t.CommandTemplateID = field.NewInt32(table, "command_template_id")
	t.Tags = field.NewBytes(table, "tags")

	t.fillFieldMap()

	return t
}

func (t *taskStage) WithContext(ctx context.Context) *taskStageDo {
	return t.taskStageDo.WithContext(ctx)
}

func (t taskStage) TableName() string { return t.taskStageDo.TableName() }

func (t taskStage) Alias() string { return t.taskStageDo.Alias() }

func (t taskStage) Columns(cols ...field.Expr) gen.Columns { return t.taskStageDo.Columns(cols...) }

func (t *taskStage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskStage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["stage_number"] = t.StageNumber
	t.fieldMap["mode"] = t.Mode
	t.fieldMap["command_template_id"] = t.CommandTemplateID
	t.fieldMap["tags"] = t.Tags

}

func (t taskStage) clone(db *gorm.DB) taskStage {
	t.taskStageDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskStage) replaceDB(db *gorm.DB) taskStage {
	t.taskStageDo.ReplaceDB(db)
	return t
}

type taskStageBelongsToCommandTemplate struct {
	db *gorm.DB

	field.RelationField

	Http struct {
		field.RelationField
	}
	Mqtt struct {
		field.RelationField
	}
	Websocket struct {
		field.RelationField
	}
	Redis struct {
		field.RelationField
	}
	Monitor struct {
		field.RelationField
		MConditions struct {
			field.RelationField
		}
	}
}

func (a taskStageBelongsToCommandTemplate) Where(conds ...field.Expr) *taskStageBelongsToCommandTemplate {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskStageBelongsToCommandTemplate) WithContext(ctx context.Context) *taskStageBelongsToCommandTemplate {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskStageBelongsToCommandTemplate) Session(session *gorm.Session) *taskStageBelongsToCommandTemplate {
	a.db = a.db.Session(session)
	return &a
}

func (a taskStageBelongsToCommandTemplate) Model(m *model.TaskStage) *taskStageBelongsToCommandTemplateTx {
	return &taskStageBelongsToCommandTemplateTx{a.db.Model(m).Association(a.Name())}
}

type taskStageBelongsToCommandTemplateTx struct{ tx *gorm.Association }

func (a taskStageBelongsToCommandTemplateTx) Find() (result *model.CommandTemplate, err error) {
	return result, a.tx.Find(&result)
}

func (a taskStageBelongsToCommandTemplateTx) Append(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskStageBelongsToCommandTemplateTx) Replace(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskStageBelongsToCommandTemplateTx) Delete(values ...*model.CommandTemplate) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskStageBelongsToCommandTemplateTx) Clear() error {
	return a.tx.Clear()
}

func (a taskStageBelongsToCommandTemplateTx) Count() int64 {
	return a.tx.Count()
}

type taskStageDo struct{ gen.DO }

func (t taskStageDo) Debug() *taskStageDo {
	return t.withDO(t.DO.Debug())
}

func (t taskStageDo) WithContext(ctx context.Context) *taskStageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskStageDo) ReadDB() *taskStageDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskStageDo) WriteDB() *taskStageDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskStageDo) Session(config *gorm.Session) *taskStageDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskStageDo) Clauses(conds ...clause.Expression) *taskStageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskStageDo) Returning(value interface{}, columns ...string) *taskStageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskStageDo) Not(conds ...gen.Condition) *taskStageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskStageDo) Or(conds ...gen.Condition) *taskStageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskStageDo) Select(conds ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskStageDo) Where(conds ...gen.Condition) *taskStageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskStageDo) Order(conds ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskStageDo) Distinct(cols ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskStageDo) Omit(cols ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskStageDo) Join(table schema.Tabler, on ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskStageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskStageDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskStageDo) Group(cols ...field.Expr) *taskStageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskStageDo) Having(conds ...gen.Condition) *taskStageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskStageDo) Limit(limit int) *taskStageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskStageDo) Offset(offset int) *taskStageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskStageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskStageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskStageDo) Unscoped() *taskStageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskStageDo) Create(values ...*model.TaskStage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskStageDo) CreateInBatches(values []*model.TaskStage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskStageDo) Save(values ...*model.TaskStage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskStageDo) First() (*model.TaskStage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStage), nil
	}
}

func (t taskStageDo) Take() (*model.TaskStage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStage), nil
	}
}

func (t taskStageDo) Last() (*model.TaskStage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStage), nil
	}
}

func (t taskStageDo) Find() ([]*model.TaskStage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskStage), err
}

func (t taskStageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskStage, err error) {
	buf := make([]*model.TaskStage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskStageDo) FindInBatches(result *[]*model.TaskStage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskStageDo) Attrs(attrs ...field.AssignExpr) *taskStageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskStageDo) Assign(attrs ...field.AssignExpr) *taskStageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskStageDo) Joins(fields ...field.RelationField) *taskStageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskStageDo) Preload(fields ...field.RelationField) *taskStageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskStageDo) FirstOrInit() (*model.TaskStage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStage), nil
	}
}

func (t taskStageDo) FirstOrCreate() (*model.TaskStage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStage), nil
	}
}

func (t taskStageDo) FindByPage(offset int, limit int) (result []*model.TaskStage, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskStageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskStageDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskStageDo) Delete(models ...*model.TaskStage) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskStageDo) withDO(do gen.Dao) *taskStageDo {
	t.DO = *do.(*gen.DO)
	return t
}
