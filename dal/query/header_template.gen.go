// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/littlebluewhite/schedule_task_command/dal/model"
)

func newHeaderTemplate(db *gorm.DB, opts ...gen.DOOption) headerTemplate {
	_headerTemplate := headerTemplate{}

	_headerTemplate.headerTemplateDo.UseDB(db, opts...)
	_headerTemplate.headerTemplateDo.UseModel(&model.HeaderTemplate{})

	tableName := _headerTemplate.headerTemplateDo.TableName()
	_headerTemplate.ALL = field.NewAsterisk(tableName)
	_headerTemplate.ID = field.NewInt32(tableName, "id")
	_headerTemplate.Name = field.NewString(tableName, "name")
	_headerTemplate.Data = field.NewBytes(tableName, "data")

	_headerTemplate.fillFieldMap()

	return _headerTemplate
}

type headerTemplate struct {
	headerTemplateDo headerTemplateDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	Data field.Bytes

	fieldMap map[string]field.Expr
}

func (h headerTemplate) Table(newTableName string) *headerTemplate {
	h.headerTemplateDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h headerTemplate) As(alias string) *headerTemplate {
	h.headerTemplateDo.DO = *(h.headerTemplateDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *headerTemplate) updateTableName(table string) *headerTemplate {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.Name = field.NewString(table, "name")
	h.Data = field.NewBytes(table, "data")

	h.fillFieldMap()

	return h
}

func (h *headerTemplate) WithContext(ctx context.Context) *headerTemplateDo {
	return h.headerTemplateDo.WithContext(ctx)
}

func (h headerTemplate) TableName() string { return h.headerTemplateDo.TableName() }

func (h headerTemplate) Alias() string { return h.headerTemplateDo.Alias() }

func (h headerTemplate) Columns(cols ...field.Expr) gen.Columns {
	return h.headerTemplateDo.Columns(cols...)
}

func (h *headerTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *headerTemplate) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 3)
	h.fieldMap["id"] = h.ID
	h.fieldMap["name"] = h.Name
	h.fieldMap["data"] = h.Data
}

func (h headerTemplate) clone(db *gorm.DB) headerTemplate {
	h.headerTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h headerTemplate) replaceDB(db *gorm.DB) headerTemplate {
	h.headerTemplateDo.ReplaceDB(db)
	return h
}

type headerTemplateDo struct{ gen.DO }

func (h headerTemplateDo) Debug() *headerTemplateDo {
	return h.withDO(h.DO.Debug())
}

func (h headerTemplateDo) WithContext(ctx context.Context) *headerTemplateDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h headerTemplateDo) ReadDB() *headerTemplateDo {
	return h.Clauses(dbresolver.Read)
}

func (h headerTemplateDo) WriteDB() *headerTemplateDo {
	return h.Clauses(dbresolver.Write)
}

func (h headerTemplateDo) Session(config *gorm.Session) *headerTemplateDo {
	return h.withDO(h.DO.Session(config))
}

func (h headerTemplateDo) Clauses(conds ...clause.Expression) *headerTemplateDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h headerTemplateDo) Returning(value interface{}, columns ...string) *headerTemplateDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h headerTemplateDo) Not(conds ...gen.Condition) *headerTemplateDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h headerTemplateDo) Or(conds ...gen.Condition) *headerTemplateDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h headerTemplateDo) Select(conds ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h headerTemplateDo) Where(conds ...gen.Condition) *headerTemplateDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h headerTemplateDo) Order(conds ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h headerTemplateDo) Distinct(cols ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h headerTemplateDo) Omit(cols ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h headerTemplateDo) Join(table schema.Tabler, on ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h headerTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h headerTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h headerTemplateDo) Group(cols ...field.Expr) *headerTemplateDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h headerTemplateDo) Having(conds ...gen.Condition) *headerTemplateDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h headerTemplateDo) Limit(limit int) *headerTemplateDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h headerTemplateDo) Offset(offset int) *headerTemplateDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h headerTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *headerTemplateDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h headerTemplateDo) Unscoped() *headerTemplateDo {
	return h.withDO(h.DO.Unscoped())
}

func (h headerTemplateDo) Create(values ...*model.HeaderTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h headerTemplateDo) CreateInBatches(values []*model.HeaderTemplate, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h headerTemplateDo) Save(values ...*model.HeaderTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h headerTemplateDo) First() (*model.HeaderTemplate, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HeaderTemplate), nil
	}
}

func (h headerTemplateDo) Take() (*model.HeaderTemplate, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HeaderTemplate), nil
	}
}

func (h headerTemplateDo) Last() (*model.HeaderTemplate, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HeaderTemplate), nil
	}
}

func (h headerTemplateDo) Find() ([]*model.HeaderTemplate, error) {
	result, err := h.DO.Find()
	return result.([]*model.HeaderTemplate), err
}

func (h headerTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HeaderTemplate, err error) {
	buf := make([]*model.HeaderTemplate, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h headerTemplateDo) FindInBatches(result *[]*model.HeaderTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h headerTemplateDo) Attrs(attrs ...field.AssignExpr) *headerTemplateDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h headerTemplateDo) Assign(attrs ...field.AssignExpr) *headerTemplateDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h headerTemplateDo) Joins(fields ...field.RelationField) *headerTemplateDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h headerTemplateDo) Preload(fields ...field.RelationField) *headerTemplateDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h headerTemplateDo) FirstOrInit() (*model.HeaderTemplate, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HeaderTemplate), nil
	}
}

func (h headerTemplateDo) FirstOrCreate() (*model.HeaderTemplate, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HeaderTemplate), nil
	}
}

func (h headerTemplateDo) FindByPage(offset int, limit int) (result []*model.HeaderTemplate, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h headerTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h headerTemplateDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h headerTemplateDo) Delete(models ...*model.HeaderTemplate) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *headerTemplateDo) withDO(do gen.Dao) *headerTemplateDo {
	h.DO = *do.(*gen.DO)
	return h
}
