// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schedule_task_command/dal/model"
)

func newRedisCommand(db *gorm.DB, opts ...gen.DOOption) redisCommand {
	_redisCommand := redisCommand{}

	_redisCommand.redisCommandDo.UseDB(db, opts...)
	_redisCommand.redisCommandDo.UseModel(&model.RedisCommand{})

	tableName := _redisCommand.redisCommandDo.TableName()
	_redisCommand.ALL = field.NewAsterisk(tableName)
	_redisCommand.ID = field.NewInt32(tableName, "id")
	_redisCommand.CommandTemplateID = field.NewInt32(tableName, "command_template_id")
	_redisCommand.Password = field.NewString(tableName, "password")
	_redisCommand.Db = field.NewInt32(tableName, "db")
	_redisCommand.Topic = field.NewString(tableName, "topic")
	_redisCommand.Message = field.NewBytes(tableName, "message")
	_redisCommand.Type = field.NewString(tableName, "type")

	_redisCommand.fillFieldMap()

	return _redisCommand
}

type redisCommand struct {
	redisCommandDo redisCommandDo

	ALL               field.Asterisk
	ID                field.Int32
	CommandTemplateID field.Int32
	Password          field.String
	Db                field.Int32
	Topic             field.String
	Message           field.Bytes
	Type              field.String

	fieldMap map[string]field.Expr
}

func (r redisCommand) Table(newTableName string) *redisCommand {
	r.redisCommandDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r redisCommand) As(alias string) *redisCommand {
	r.redisCommandDo.DO = *(r.redisCommandDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *redisCommand) updateTableName(table string) *redisCommand {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.CommandTemplateID = field.NewInt32(table, "command_template_id")
	r.Password = field.NewString(table, "password")
	r.Db = field.NewInt32(table, "db")
	r.Topic = field.NewString(table, "topic")
	r.Message = field.NewBytes(table, "message")
	r.Type = field.NewString(table, "type")

	r.fillFieldMap()

	return r
}

func (r *redisCommand) WithContext(ctx context.Context) *redisCommandDo {
	return r.redisCommandDo.WithContext(ctx)
}

func (r redisCommand) TableName() string { return r.redisCommandDo.TableName() }

func (r redisCommand) Alias() string { return r.redisCommandDo.Alias() }

func (r redisCommand) Columns(cols ...field.Expr) gen.Columns {
	return r.redisCommandDo.Columns(cols...)
}

func (r *redisCommand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *redisCommand) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["command_template_id"] = r.CommandTemplateID
	r.fieldMap["password"] = r.Password
	r.fieldMap["db"] = r.Db
	r.fieldMap["topic"] = r.Topic
	r.fieldMap["message"] = r.Message
	r.fieldMap["type"] = r.Type
}

func (r redisCommand) clone(db *gorm.DB) redisCommand {
	r.redisCommandDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r redisCommand) replaceDB(db *gorm.DB) redisCommand {
	r.redisCommandDo.ReplaceDB(db)
	return r
}

type redisCommandDo struct{ gen.DO }

func (r redisCommandDo) Debug() *redisCommandDo {
	return r.withDO(r.DO.Debug())
}

func (r redisCommandDo) WithContext(ctx context.Context) *redisCommandDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r redisCommandDo) ReadDB() *redisCommandDo {
	return r.Clauses(dbresolver.Read)
}

func (r redisCommandDo) WriteDB() *redisCommandDo {
	return r.Clauses(dbresolver.Write)
}

func (r redisCommandDo) Session(config *gorm.Session) *redisCommandDo {
	return r.withDO(r.DO.Session(config))
}

func (r redisCommandDo) Clauses(conds ...clause.Expression) *redisCommandDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r redisCommandDo) Returning(value interface{}, columns ...string) *redisCommandDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r redisCommandDo) Not(conds ...gen.Condition) *redisCommandDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r redisCommandDo) Or(conds ...gen.Condition) *redisCommandDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r redisCommandDo) Select(conds ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r redisCommandDo) Where(conds ...gen.Condition) *redisCommandDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r redisCommandDo) Order(conds ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r redisCommandDo) Distinct(cols ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r redisCommandDo) Omit(cols ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r redisCommandDo) Join(table schema.Tabler, on ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r redisCommandDo) LeftJoin(table schema.Tabler, on ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r redisCommandDo) RightJoin(table schema.Tabler, on ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r redisCommandDo) Group(cols ...field.Expr) *redisCommandDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r redisCommandDo) Having(conds ...gen.Condition) *redisCommandDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r redisCommandDo) Limit(limit int) *redisCommandDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r redisCommandDo) Offset(offset int) *redisCommandDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r redisCommandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *redisCommandDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r redisCommandDo) Unscoped() *redisCommandDo {
	return r.withDO(r.DO.Unscoped())
}

func (r redisCommandDo) Create(values ...*model.RedisCommand) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r redisCommandDo) CreateInBatches(values []*model.RedisCommand, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r redisCommandDo) Save(values ...*model.RedisCommand) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r redisCommandDo) First() (*model.RedisCommand, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedisCommand), nil
	}
}

func (r redisCommandDo) Take() (*model.RedisCommand, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedisCommand), nil
	}
}

func (r redisCommandDo) Last() (*model.RedisCommand, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedisCommand), nil
	}
}

func (r redisCommandDo) Find() ([]*model.RedisCommand, error) {
	result, err := r.DO.Find()
	return result.([]*model.RedisCommand), err
}

func (r redisCommandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RedisCommand, err error) {
	buf := make([]*model.RedisCommand, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r redisCommandDo) FindInBatches(result *[]*model.RedisCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r redisCommandDo) Attrs(attrs ...field.AssignExpr) *redisCommandDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r redisCommandDo) Assign(attrs ...field.AssignExpr) *redisCommandDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r redisCommandDo) Joins(fields ...field.RelationField) *redisCommandDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r redisCommandDo) Preload(fields ...field.RelationField) *redisCommandDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r redisCommandDo) FirstOrInit() (*model.RedisCommand, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedisCommand), nil
	}
}

func (r redisCommandDo) FirstOrCreate() (*model.RedisCommand, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedisCommand), nil
	}
}

func (r redisCommandDo) FindByPage(offset int, limit int) (result []*model.RedisCommand, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r redisCommandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r redisCommandDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r redisCommandDo) Delete(models ...*model.RedisCommand) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *redisCommandDo) withDO(do gen.Dao) *redisCommandDo {
	r.DO = *do.(*gen.DO)
	return r
}
